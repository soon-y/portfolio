/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, forwardRef } from 'react'
import { useGLTF, Html } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { param } from '@/lib/param'
import MobileNav from './MobileNav'

const Mobile = forwardRef(function Mobile(props, ref) {
  const { nodes, materials } = useGLTF('/model/mobile.glb')
  const mobile = useRef()

  useFrame((state) => {
    if (mobile.current && props.redSign) {
      mobile.current.rotation.y = (Math.sin(state.clock.elapsedTime)) * 0.3
      mobile.current.rotation.x = (Math.sin(state.clock.elapsedTime)) * 0.3
    }
  })

  return (
    <group {...props} dispose={null} >
      <group ref={mobile}>
        <mesh
          geometry={nodes.Cube.geometry}
          material={materials.Material}
          scale={[0.211, 1.057, 1.03]}>
          <meshStandardMaterial color={props.color} />
        </mesh>
        <mesh
          geometry={nodes.Cube001.geometry}
          material={materials.Material}
          scale={[0.211, 1.057, 1.03]}>
          <meshStandardMaterial color={props.color} />
        </mesh>
      </group>
      {!props.redSign &&
        <group>
          <mesh
            geometry={nodes.screen.geometry} position={[0.001, 0.005, 0.006]}
            material={materials['Material.001']}
            scale={[0.211, 1.049, 1.01]}>
            <meshStandardMaterial color={param.black} opacity={props.opacity} transparent />
          </mesh>
          <Html ref={ref} position-x={-0.01} className="iframe-wrapper" rotation-y={Math.PI / 2} scale={0.2} transform>
            <MobileNav src={props.src} content={props.content} />
          </Html>
        </group>
      }
      <mesh visible={!!props.redSign}
        geometry={nodes.Torus001.geometry}
        material={materials.red}
        position={[0.568, 0, 0]}
        rotation={[Math.PI / 4, 0, -Math.PI / 2]}
        scale={1.221}
      />
    </group>
  )
})

function Screen({ ...props }) {
  const stencil = useMask(1)
  const pill = useLoader(THREE.TextureLoader, './caregem/pill.png')
  const scroll = useLoader(THREE.TextureLoader, './caregem/scrollImg.png')
  const ref = useRef()

  if (ref.current) {
    gsap.to(ref.current.position, {
      y: props.scrollIndex * 1.6,
      duration: 0.5,
      ease: "power2.inout",
    })
  }

  return (
    <>
      {(props.index === 0) && <group {...props}>
        <mesh position={[0, 0, 1.47]} scale={0.8}>
          <planeGeometry args={[2, 2]} />
          <meshStandardMaterial map={pill} {...stencil} />
        </mesh>
      </group>}

      {(props.index === 1) && <group {...props} ref={ref}>
        <mesh position={[0, 0, 1.47]} scale={0.8} position-y={-3.2}>
          <planeGeometry args={[2, 10]} />
          <meshStandardMaterial map={scroll} {...stencil} />
        </mesh>
      </group>}
    </>
  )
}

useGLTF.preload('/model/mobile.glb')
export default Mobile